4 pillars of oops
-----------------------------------------------------------------

encapsulation
--------------------------------------
bundling data and methods together
protecting data from direct access and providing controlled access through public methods

code organization
data hiding
abstraction

security
maintainability


inheritance
-----------------------------------------
new classes based on existing classes
code reuse
organization and structuring of related classes
"is-a" relationship (derived class inherits properties and behavior of base class)
modify existing and define unique



polymorphism
-----------------------------------------
treating object of derived class as object of base class
flexibility
extensibility
code reuse

method overloading
method overriding



abstraction
-------------------------------------------------
creating a simplified and generalized view of an object or system
identifying the essential features and behaviors of an object while hiding the unnecessary details

abstract class
interface

modular and maintainable code, as it allows us to work with high-level concepts rather than dealing with low-level implementation details






