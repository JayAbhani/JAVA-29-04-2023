list
--------------------------------------------

The List interface in the Java Collections Framework extends the Collection interface and represents an ordered collection of elements. It allows duplicate elements and provides methods for accessing, manipulating, and iterating over the elements in a specific order. Let's explore the List interface in detail:

public interface List<E> extends Collection<E> {
    // Positional Access Operations
    E get(int index);
    E set(int index, E element);
    void add(int index, E element);
    E remove(int index);

    // Search Operations
    int indexOf(Object o);
    int lastIndexOf(Object o);

    // List Iterators
    ListIterator<E> listIterator();

    // Sublist
    List<E> subList(int fromIndex, int toIndex);
}


Positional Access Operations:

E get(int index): Returns the element at the specified index in the list.
E set(int index, E element): Replaces the element at the specified index with the specified element.
void add(int index, E element): Inserts the specified element at the specified index, shifting subsequent elements to the right.
E remove(int index): Removes and returns the element at the specified index, shifting subsequent elements to the left.

Search Operations:

int indexOf(Object o): Returns the index of the first occurrence of the specified element in the list, or -1 if not found.
int lastIndexOf(Object o): Returns the index of the last occurrence of the specified element in the list, or -1 if not found.
List Iterators:

ListIterator<E> listIterator(): Returns a list iterator over the elements in the list. It allows bidirectional traversal and modification of the elements.
Sublist:

List<E> subList(int fromIndex, int toIndex): Returns a view of the portion of the list between the specified fromIndex (inclusive) and toIndex (exclusive). Changes to the sublist will be reflected in the original list.
The List interface provides additional methods that are specific to ordered collections, allowing you to work with elements based on their position/index in the list. By implementing the List interface, classes provide functionalities such as random access, insertion, deletion, and searching.


Here's an example demonstrating the usage of some List interface methods:

import java.util.ArrayList;
import java.util.List;

public class ListExample {
    public static void main(String[] args) {
        List<String> fruits = new ArrayList<>();

        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Orange");
        fruits.add("Banana");

        System.out.println("Size: " + fruits.size());  // Output: Size: 4
        System.out.println("First Element: " + fruits.get(0));  // Output: First Element: Apple

        fruits.set(1, "Mango");
        System.out.println("Modified List: " + fruits);  // Output: Modified List: [Apple, Mango, Orange, Banana]

        int index = fruits.indexOf("Orange");
        System.out.println("Index of Orange: " + index);  // Output: Index of Orange: 2

        fruits.remove(3);
        System.out.println("After Removal: " + fruits);  // Output: After Removal: [Apple, Mango, Orange]

        List<String> sublist = fruits.subList(0, 2);
        System.out.println("Sublist: " + sublist);  // Output: Sublist: [Apple, Mango]
    }
}


In this example, we create a list of fruits using the ArrayList class, perform various operations such as adding elements, accessing elements by index, modifying elements, finding the index of an element, removing an element, and creating a sublist.

The List interface provides a powerful set of methods for working with ordered collections, allowing you to manipulate and access elements based on their position in the list.