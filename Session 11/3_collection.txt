collection interface
----------------------------------------------------------------------
The Collection interface is the root interface of the Java Collections Framework hierarchy. It defines the basic behavior and operations that all collection classes must implement. Let's explore the Collection interface in detail:

public interface Collection<E> {
    // Basic operations
    int size();
    boolean isEmpty();
    boolean contains(Object o);
    boolean add(E e);
    boolean remove(Object o);
    void clear();

    // Bulk operations
    boolean containsAll(Collection<?> c);
    boolean addAll(Collection<? extends E> c);
    boolean removeAll(Collection<?> c);
    boolean retainAll(Collection<?> c);

    // Conversion operations
    Object[] toArray();
    <T> T[] toArray(T[] a);

    // Iterator
    Iterator<E> iterator();
}



Basic Operations:

int size(): Returns the number of elements in the collection.
boolean isEmpty(): Checks if the collection is empty.
boolean contains(Object o): Checks if the collection contains a specified element.
boolean add(E e): Adds an element to the collection.
boolean remove(Object o): Removes a specified element from the collection.
void clear(): Removes all elements from the collection.

Bulk Operations:

boolean containsAll(Collection<?> c): Checks if the collection contains all the elements of the specified collection.
boolean addAll(Collection<? extends E> c): Adds all elements from the specified collection to the collection.
boolean removeAll(Collection<?> c): Removes all elements from the collection that are also present in the specified collection.
boolean retainAll(Collection<?> c): Removes all elements from the collection that are not present in the specified collection.
Conversion Operations:

Object[] toArray(): Returns an array containing all the elements of the collection.
<T> T[] toArray(T[] a): Returns an array containing all the elements of the collection, using the specified array if it is large enough.
Iterator:

Iterator<E> iterator(): Returns an iterator over the elements in the collection, allowing you to iterate and access the elements sequentially.
The Collection interface provides a common set of methods that are implemented by various collection classes. By programming to the Collection interface, you can write code that is generic and independent of the specific collection implementation.

It's important to note that the Collection interface does not guarantee any specific order of elements. The order depends on the implementation class used. If you require ordered or sorted collections, you can use specific subinterfaces like List or SortedSet.

Here's an example demonstrating the usage of some Collection interface methods:

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class CollectionExample {
    public static void main(String[] args) {
        Collection<String> names = new ArrayList<>();

        names.add("Alice");
        names.add("Bob");
        names.add("Charlie");

        System.out.println("Size: " + names.size());  // Output: Size: 3
        System.out.println("Contains 'Alice': " + names.contains("Alice"));  // Output: Contains 'Alice': true

        names.remove("Bob");
        System.out.println("Size after removal: " + names.size());  // Output: Size after removal: 2

        names.clear();
        System.out.println("Empty? " + names.isEmpty());  // Output: Empty? true

        names.add("David");
        names.add("Eve");
        names.add("Frank");

        Iterator<String> iterator = names.iterator();
        while (iterator.hasNext()) {
            String name = iterator.next();
            System.out.println(name);
        }
    }
}

In this example, we create a collection of names using the ArrayList class, add elements, check for element existence, remove an element, clear the collection, and iterate over the elements using an iterator.

The Collection interface provides a foundation for working with collections in Java and is implemented by various collection classes, each designed for specific requirements and behaviors.